
Instruction:

Convert the following Selenium Java code into Playwright TypeScript code for the search functionality.

Follow the latest Playwright TypeScript syntax.

Generate exactly the same steps and no additional steps.

Write comments.

Do not hardcode waits or use sleep; rely on Playwright’s wait mechanisms.

Use the same locator as in Selenium wherever possible.

If a locator may fail due to geolocation-specific variations (e.g., different BBC layouts in UK vs non-UK), use a geo-safe locator:

Prefer locating links/buttons by text and partial href (e.g., //a[contains(@href,'bbc.') and text()='Home']) instead of assuming exact DOM structures like header nav.

Use .first() if multiple matches exist to avoid strict mode errors.

Wait for elements to be visible or attached instead of assuming their container exists.

If you are unable to convert from Java to TypeScript, comment not implemented.

[CRITICAL] The output must be Playwright TypeScript code, not plain TypeScript.

Context:
You are an AI assistant converting Selenium Java code into Playwright TypeScript code.
The project is a media web application and the URL is https://www.bbc.com


Examples:
The Selenium java code:
package com.bbc.tests;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

/**
 * This class contains a Selenium test that navigates to the BBC homepage
 * and clicks on the 'Home' link using a reliable XPath locator.
 */
public class BBCNavigationTest {

    private WebDriver driver;

    /**
     * Initializes the Chrome WebDriver and opens the BBC website.
     */
    @BeforeClass
    public void setUp() {
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://www.bbc.com/");
    }

    /**
     * Locates and clicks on the 'Home' link in the BBC navigation bar.
     */
    @Test
    public void clickOnHomeLink() {
        WebElement homeLink = driver.findElement(By.xpath("//a[@href='https://www.bbc.co.uk']//span[text()='Home']"));
        homeLink.click();
    }

    /**
     * Closes the WebDriver after the test execution.
     */
    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}



Sample Playwright typescript code:
import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});


Persona:
Act as a senior automation test engineer to generate the code
Act as a senior technical architect to review the code


Output format:
Follow the coding standards and generate a Playwright typescript code



API Integration JSON:
--------------------

{
  "messages": [
    {
      "role": "user",
      "content": "Instruction:\n\nConvert the following Selenium Java code into Playwright TypeScript code.\n\nFollow the latest Playwright TypeScript syntax.\n\nGenerate exactly the same steps and no additional steps.\n\nWrite comments.\n\nDo not hardcode waits or use sleep; rely on Playwright’s wait mechanisms.\n\nUse the same locator as in Selenium wherever possible.\n\n[MANDATORY] If a locator may fail due to geolocation-specific variations (e.g., different BBC layouts in UK vs non-UK), use a geo-safe locator:\n\nPrefer locating links/buttons by text and partial href (e.g., //a[contains(@href,'bbc.') and text()='Home']) instead of assuming exact DOM structures like header nav.\n\nUse .first() if multiple matches exist to avoid strict mode errors.\n\nWait for elements to be visible or attached instead of assuming their container exists.\n\nIf you are unable to convert from Java to TypeScript, comment not implemented.\n\n[CRITICAL] The output must be Playwright TypeScript code, not plain TypeScript.\n\nContext:\nYou are an AI assistant converting Selenium Java code into Playwright TypeScript code.\nThe project is a media web application and the URL is https://www.bbc.com\n\nExamples:\nThe Selenium java code:\npackage com.bbc.tests;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\n/**\n * This class contains a Selenium test that navigates to the BBC homepage\n * and clicks on the 'Home' link using a reliable XPath locator.\n */\npublic class BBCNavigationTest {\n\n    private WebDriver driver;\n\n    /**\n     * Initializes the Chrome WebDriver and opens the BBC website.\n     */\n    @BeforeClass\n    public void setUp() {\n        driver = new ChromeDriver();\n        driver.manage().window().maximize();\n        driver.get(\"https://www.bbc.com/\");\n    }\n\n    /**\n     * Locates and clicks on the 'Home' link in the BBC navigation bar.\n     */\n    @Test\n    public void clickOnHomeLink() {\n        WebElement homeLink = driver.findElement(By.xpath(\"//a[@href='https://www.bbc.co.uk']//span[text()='Home']\"));\n        homeLink.click();\n    }\n\n    /**\n     * Closes the WebDriver after the test execution.\n     */\n    @AfterClass\n    public void tearDown() {\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n}\n\n\n\nSample Playwright typescript code:\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects page to have a heading with the name of Installation.\n  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n});\n\n\nPersona:\nAct as a senior automation test engineer to generate the code\nAct as a senior technical architect to review the code\n\n\nOutput format:\nFollow the coding standards and generate a Playwright typescript code"
    }
  ],
  "model": "meta-llama/llama-4-scout-17b-16e-instruct"
}



